openapi: 3.0.0
info:
  title: Videogame Store
  description: |-
    This is a Videogame store Server based on the OpenAPI 3.1 specification.
    You can use this API if you start a new Viedeogame online store

    Some useful links:
    - [The Videogame store repository](https://github.com/Riderzzz-code/TP-Outils_et_methodes_de_dev.git)
 
  contact:
    email: nathan.lang12@protonmail.com
  version: 1.0.0
servers:
  - url: https://api.videogame.store.com/v1
    description: Main production server
tags:
  - name: games
    description: Informations about the games
paths:
  /games:
    put:
      tags:
        - games
      summary: Update an existing game.
      description: Update an existing game with the ID.
      operationId: updateGame
      requestBody:
        description: Update a Game in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Game'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Game'
        '400':
          description: Invalid ID supplied
        '404':
          description: Game not found
        '422':
          description: Validation exception
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      security:
        - bearerAuth: []
    post:
      tags:
        - games
      summary: Add a new game to the store.
      description: Add a new game to the store.
      operationId: addGame
      requestBody:
        description: Create a new game object in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Game'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Game'
        '400':
          description: Invalid input
        '422':
          description: Validation exception
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      security:
        - bearerAuth: []
    get:
      tags: 
        - games
      summary: Find game by id.
      description: Returns a game name.
      operationId: getGame
      parameters:
        - $ref: '#/components/parameters/per-page'
        - $ref: '#/components/paremeters/page'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Game'
        '400':
          description: Invalid ID supplied
        '404':
          description: Pet not found
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /games/{gameId}:
    get:
      tags:
        - games
      summary: Find game by id.
      description: Returns a game name.
      operationId: getGameById
      parameters:
        - name: gameId
          in: path
          description: ID of the Game to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Game'
        '400':
          description: Invalid ID supplied
        '404':
          description: Pet not found
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    delete:
      tags:
        - games
      summary: Deletes a game from the Videogame store.
      description: delete a game.
      operationId: deleteGame
      parameters:
        - name: api_key
          in: header
          description: ''
          required: false
          schema:
            type: string
        - name: gameId
          in: path
          description: Game id to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
        '400':
          description: Invalid pet value
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      security:
        - bearerAuth: []
  /games/{gameId}/character:
    get:
      tags:
        - games
      summary: Find the principal character from a videogame.
      description: Returns the character's name.
      operationId: getCharacterByGameId
      parameters:
        - name: gameId
          in: path
          description: ID of the Game that returns the character name
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Character'
        '400':
          description: Invalid ID supplied
        '404':
          description: Pet not found
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"      
components:
  schemas:
    Category:
      type: object
      properties:
        id:
          type: integer
          format: int64
          examples: [1]
        name:
          type: string
          examples: [War]
    Tag:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
    Game:
      required:
        - name
      type: object
      properties:
        id:
          type: integer
          format: int64
          examples: [25]
        name:
          type: string
          examples: [Battlefield V]
        category:
          $ref: '#/components/schemas/Category'
        photoUrls:
          type: array
          items:
            type: string
          maxItems: 10
        character:
          $ref: '#/components/schemas/Character'      
        tags:
          type: array
          items:
            $ref: '#/components/schemas/Tag'
        status:
          type: string
          description: Game status in the store
          enum:
            - available
            - pending
            - sold
    Character:
      type: object
      properties:
        id:
          type: integer
          format: int64
          examples: [1]
        name:
          type: string
          examples: [Mason]
        Capacities:
          type: array
          items:
            type: string
          minItems: 1
          maxItems: 3   
        category:
          type: string
          description: Character type in the game
          enum:
            - first
            - second
            - other
    Error:
      type: object
      properties:
        code:
          type: string
        message:
          type: string
      required:
        - code
        - message
  parameters:
    per-page:
      name: per_page
      description: The number of results per page (max 100).
      in: query
      schema:
        type: integer
        default: 30
        maximum: 100
    page:
      name: page
      description: The page number of the results to fetch.
      in: query
      schema:
        type: integer
        default: 1 
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT